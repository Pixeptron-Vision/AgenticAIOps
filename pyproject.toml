[tool.poetry]
name = "llmops-agent"
version = "0.1.0"
description = "Multi-agent LLMOps platform for autonomous ML training with AWS Bedrock and SageMaker"
authors = ["sri-chakra"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/sri-chakra/llmops-agent"
repository = "https://github.com/sri-chakra/llmops-agent"
keywords = ["llmops", "mlops", "aws", "bedrock", "sagemaker", "agents", "machine-learning"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
packages = [{include = "llmops_agent", from = "src"}]

[tool.poetry.dependencies]
python = "^3.11"

# Web Framework
fastapi = ">=0.115.0"
uvicorn = {version = ">=0.34.2", extras = ["standard"]}
pydantic = "^2.5.3"
pydantic-settings = "^2.1.0"
python-multipart = "^0.0.6"

# AWS SDK
boto3 = "^1.34.22"
botocore = "^1.34.22"

# ML & Data Science
transformers = "^4.37.0"
datasets = "^2.16.1"
torch = "^2.1.2"
accelerate = "^0.26.1"
peft = "^0.8.2"
evaluate = "^0.4.1"
scikit-learn = "^1.4.0"
numpy = "^1.26.3"
pandas = "^2.1.4"

# MLOps Tools
mlflow = "^2.9.2"
sagemaker = "^2.199.0"

# Hugging Face
huggingface-hub = "^0.20.2"

# Database
sqlalchemy = "^2.0.25"
alembic = "^1.13.1"

# Utilities
python-dotenv = "^1.0.0"
click = "^8.1.7"
rich = "^13.7.0"
typer = ">=0.16.0"
tenacity = "^8.2.3"
httpx = ">=0.28.1"
orjson = "^3.9.12"
pyyaml = "^6.0.1"

# Async & Concurrency
asyncio = "^3.4.3"
aiofiles = "^23.2.1"

# Monitoring & Logging
structlog = "^24.1.0"
python-json-logger = "^2.0.7"

# Security
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
passlib = {extras = ["bcrypt"], version = "^1.7.4"}

# NLP Metrics (for evaluation)
seqeval = "^1.2.2"
rouge-score = "^0.1.2"
langgraph = "<0.3"
langchain = "^0.3.0"
langchain-core = "^0.3.0"
starlette = ">=0.46.2"
bedrock-agentcore-starter-toolkit = "^0.1.26"
bedrock-agentcore = "^1.0.3"
langchain-aws = "^0.2.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.4"
pytest-asyncio = "^0.23.3"
pytest-cov = "^4.1.0"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
moto = {extras = ["all"], version = "^4.2.12"}

# Code Quality
black = "^23.12.1"
isort = "^5.13.2"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pylint = "^3.0.3"
bandit = "^1.7.6"

# Type Stubs
boto3-stubs = {extras = ["essential", "bedrock", "sagemaker", "s3", "dynamodb", "lambda", "iam", "cloudwatch"], version = "^1.34.22"}
types-pyyaml = "^6.0.12.12"
types-requests = "^2.31.0.20240106"

# Development Tools
ipython = "^8.20.0"
ipdb = "^0.13.13"
watchdog = "^3.0.0"

# Pre-commit Hooks
pre-commit = "^3.6.0"

[tool.poetry.group.docs.dependencies]
# Documentation
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.3"
pymdown-extensions = "^10.7"
mkdocs-mermaid2-plugin = "^1.1.1"
mkdocstrings = {extras = ["python"], version = "^0.24.0"}
mkdocs-gen-files = "^0.5.0"
mkdocs-literate-nav = "^0.6.1"

# API Documentation
sphinx = "^7.2.6"
sphinx-rtd-theme = "^2.0.0"

[tool.poetry.group.jupyter.dependencies]
# Jupyter & Notebooks
jupyter = "^1.0.0"
notebook = "^7.0.6"
jupyterlab = "^4.0.10"
ipywidgets = "^8.1.1"
matplotlib = "^3.8.2"
seaborn = "^0.13.1"
plotly = "^5.18.0"

[tool.poetry.scripts]
# CLI Commands
llmops = "llmops_agent.cli:app"
llmops-server = "llmops_agent.api.main:start_server"
llmops-verify = "llmops_agent.scripts.verify_env:main"
llmops-setup = "llmops_agent.scripts.setup_aws:main"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/sri-chakra/llmops-agent/issues"
"Documentation" = "https://github.com/sri-chakra/llmops-agent/docs"

# ================================================================
# Tool Configurations
# ================================================================

[tool.black]
line-length = 100
target-version = ['py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_gitignore = true
skip_glob = ["**/.venv/**", "**/venv/**", "**/.env/**"]

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--strict-markers",
    "--cov=src/llmops_agent",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--asyncio-mode=auto",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "aws: marks tests that require AWS credentials",
    "gpu: marks tests that require GPU",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "datasets.*",
    "mlflow.*",
    "dvc.*",
    "sagemaker.*",
    "moto.*",
]
ignore_missing_imports = true

[tool.pylint.messages_control]
max-line-length = 100
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "W0212",  # protected-access
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
